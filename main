package com.example.robocart;

import androidx.appcompat.app.AppCompatActivity;

import android.app.Application;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.BatteryManager;
import android.os.Bundle;

import com.rsc.impl.OnROSListener;
import com.rsc.reemanclient.ConnectServer;

import android.util.Log;
import android.view.View;
import android.widget.Button;

public class MainActivity extends AppCompatActivity {

    private Button mButton;
    private Button SDK;
    private Button ROS;
    private String version;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mButton = findViewById(R.id.mbutton);
        SDK = findViewById(R.id.SDK);
        ROS = findViewById(R.id.ROS);
        
        mButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                mbuttonText();
            }
        });

        SDK.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                getSDKVersion();
            }
        });
    }

    //ConnectServer cs = ConnectServer.getInstance(getApplication());

    private void mbuttonText() {
        mButton.setText("Bring it ON");
    }

    public String getSDKVersion() {
        return this.version;
    }
    
 /*   private OnROSListener mRosListener = new OnROSListener() {
        @Override
        public void onResult(String data) {
            Log.d("ros onResult", data);
        }
    };

    public static class RobotHardSdk {
        private static RobotHardSdk
                sdk;
        private Application
                mContext;
        private ConnectServer
                cs;

        private RobotHardSdk(Application application) {
            mContext = application;
            cs = ConnectServer.getInstance(mContext);
            registerRos();
        }

        public static void CreateInstance(Application application)
        { if (sdk == null) {
            sdk = new RobotHardSdk(application);
        }
        }

        public static RobotHardSdk getInstance() {
            if (sdk != null)
            {
                return sdk;
            }
            else
            {
                return null;
            }
        }

        public void release() {
            cs.registerROSListener(null);
            if (cs != null)
                cs.release();
            if (sdk != null)
                sdk = null;
        }
        public void registerRos() {
            if (cs == null)
                return;
            cs.registerROSListener(mRosListener);
        }

        private OnROSListener mRosListener = new OnROSListener()
        { @Override
        public void onResult(String data)
        { Log.d("ros onResult", data);
        }
        };
    }

    RobotReceiver robotReceiver;
    //initialization
    private void initReceiver() {
        robotReceiver = RobotReceiver.getInstance();
        IntentFilter filter = new IntentFilter();
        filter.addAction("REEMAN_BROADCAST_SCRAMSTATE");
        filter.addAction("AUTOCHARGE_ERROR_DOCKNOTFOUND");
        filter.addAction("AUTOCHARGE_ERROR_DOCKINGFAILURE");
        filter.addAction(Intent.ACTION_BATTERY_CHANGED);
        registerReceiver(robotReceiver, filter);
    }
    //Logout
    private void unReceiver() {
        if (robotReceiver != null)
        { unregisterReceiver(robotReceiver);
        }
    }
    public static class RobotReceiver extends BroadcastReceiver {
        private static RobotReceiver instance;

        public static RobotReceiver getInstance() {
            if (instance == null) {
                instance = new RobotReceiver();
            }
            return instance;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if ("REEMAN_BROADCAST_SCRAMSTATE".equals(action)) {
                int stopState = intent.getIntExtra("SCRAM_STATE", -1);
            } else if (Intent.ACTION_BATTERY_CHANGED.equals(action))
            { int level =
                    intent.getIntExtra(BatteryManager.EXTRA_LEVEL, 0);
                int mPlugType =
                        intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0);
            } else if ("AUTOCHARGE_ERROR_DOCKNOTFOUND".equals(action))
            { Log.d("POWER", "DOCKNOTFOUND");
            } else if ("AUTOCHARGE_ERROR_DOCKINGFAILURE".equals(action))
            {
                Log.d("POWER", "DOCKINGFAILURE");
            }
        }
    } */
}
